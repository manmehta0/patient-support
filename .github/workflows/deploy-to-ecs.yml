name: Deploy to ECS
run-name: Deploy - ${{ github.ref_name }} - ${{ github.run_number }}

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # Step 1: Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      # Step 2: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Update ECS API Task Definition
      - name: Update ECS API Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definitions/ecs-task-definition-api.json

      # Step 4: Update ECS Frontend Task Definition
      - name: Update ECS Frontend Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definitions/ecs-task-definition-frontend.json

      # Step 5: Update ECS API Service to trigger new deployment
      - name: Update ECS API Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_API_NAME }} \
            --force-new-deployment

      # Step 6: Update ECS Frontend Service to trigger new deployment
      - name: Update ECS Frontend Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_FRONTEND_NAME }} \
            --force-new-deployment
